O que é o GitBash?

O Git Bash é o aplicativo para ambientes do Microsoft Windows que oferece a camada de emulação
para a experiência de linha de comando Git. Bash é acrônico para "Bourne Again Shell".
Shells são aplicativos terminais usados como interface em sistemas operacionais por meio de comandos gravados.

Link Download: https://git-scm.com/downloads


E o que é Git?

Git é um sistema de versionamento de código comumente utilizado para projetos de desenvolvimento de software.
Isso significa que ele trabalha como um intermediador entre um repositório local
e um remoto (como por exemplo o GitHub), onde você pode controlar e administrar as alterações
e atualizações do seu código.

Lembrando que Git e Gitbash são a mesma coisa!


COMANDOS MAIS UTILIZADOS E O QUE ELES FAZEM.

    git init: inicializa um repositório local git
    git status: verifica o estado dos seus arquivos
    git add <nomeDoArquivo>: envia seu arquivo especificado para o Stage
    git add - -all: envia todos os arquivos para o Stage
    git commit -m “tituloDoCommit: envia o que está no Stage para o HEAD
    git remote add origin urlDoRepositorio: adiciona e indica a URL do repositório remoto em que os arquivos serão mantidos
    git push origin master: envia os arquivos para o repositório remoto que você especificou através da URL do comando acima
    git checkout -b <nomeDaBranch>: cria uma nova branch
    git checkout <nomeDaBranch>: alterna para a branch especificada
    
    
    
COMO EXCLUIR PASTAS E ARQUIVOS SEM APAGAR O REPOSITÓRIO?
 
Através do próprio gitBash...

Quando precisar remover pasta:

gir rm -rf --cached (nome da pasta/) obs: no nome da pasta precisa ter a "/" no final



Se for remover só o arquivo:

git rm --cached (nome do arquivo)



Espero que ajude vocês. Já adianto que nem todos são usados no dia-a-dia,
mas é bom saber da existência deles e para que servem!

O que está em negrito são dados que podem (ou devem) ser alterados.



git remote add origin git@github.com:<userGitHub>/<nomeDoRepositório>.git ⇾ Cria um "apelido" pro repositório no GitHub.
Nesse caso o apelido é Origin, comumente é usado esse nome para o repositório padrão;

git init ⇾ inicia o git na pasta selecionada;

git status ⇾ Mostra o status das alterações;

git add '<nomeDoArquivo>' ⇾ Adiciona o arquivo ao monitoramento de alterações do git;

git add -A // git add * // git add .⇾ Adiciona todos os arquivos que não estão sendo monitorados ao monitoramento do git;

git commit -m 'Resumo das alterações' ⇾ commita as alterações para o branch que está sendo trabalhado
(ou o branch master, preciso ver ainda);

git branch ⇾ Vê os branchs existentes e sinaliza o que está sendo utilizado no momento com um *;

git branch <nome> ⇾ Cria um novo branch (não usar os <>);

git checkout <nome> ⇾ Altera o branch que está sendo usado;

git diff ⇾ Mostra o que foi alterado antes de dar commit em um arquivo;

git diff --name-only ⇾ Mostra somente os nomes dos arquivos que foram modificados;

git checkout HEAD -- <nomeDoArquivo> ⇾ Retorna as atualizações feitas anteriormente no arquivo do branch atual
(para selecionar outro branch, só colocar o nome no lugar do HEAD);

git reset --soft <códigoDoCommit> ⇾ Reseta o arquivo para um commit anterior sem perder o que foi alterado;

git reset --hard <códigoDoCommit> ⇾ Reseta o arquivo para um commit anterior apagando todas as alterações feitas;

git reset --mixed <códigoDoCommit> ⇾ Reseta o arquivo para um commit anterior sem perder o que foi alterado,
porém é necessário adicionar os arquivos novamente;

git revert --no-edit <códigoDoCommit> ⇾ Da um commit revertendo o que foi feito no commit especificado.
Mudando os arquivos, porém possibilitando "commitar" novamente o mesmo posteriormente;

git push <apelidoRepositorioGitHub> <nomeBranch> ⇾ Envia o branch selecionado ao repositório GitHub;

git push <apelidoRepositorioGitHub> :<nomeBranch> ⇾ Deleta o branch do repositório GitHub

git branch -D nomeBranch ⇾ Deleta o branch local;

git pull <apelidoRepositorioGitHub> <nomeBranch> ⇾ Recebe o repositório GitHub no branch selecionado;

git clone <linkRepositorio> ⇾ Clona um repositório do link especificado na pasta selecionada no terminal;

git remote -v ⇾ Mostra o apelido dos repositório remotos;
